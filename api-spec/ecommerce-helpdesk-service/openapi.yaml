openapi: 3.0.0
info:
  version: 1.0.0
  title: Pagopa eCommerce helpdesk service api
  description: This microservice that expose eCommerce services for assistance api.
servers:
  - url: https://${hostname}
tags:
  - name: eCommerce
    description: Api's for performing transaction search on ecommerce DB
    externalDocs:
      url: https://pagopa.atlassian.net/wiki/spaces/I/pages/492339720/pagoPA+eCommerce+Design+Review
      description: Technical specifications
paths:
  /v1/ecommerce/searchDeadLetterEvents:
    post:
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            default: 0
          required: true
          description: Searched page number, starting from 0
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 10
          required: true
          description: Max element per page
      requestBody:
        $ref: '#/components/requestBodies/SearchDeadLetterEventRequest'
      tags:
        - eCommerce
      operationId: ecommerceSearchDeadLetterEvents
      summary: Search dead letter by input parameters
      description: GET with body payload - no resources created
      responses:
        '200':
          description: Transactions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDeadLetterEventResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
  /v1/ecommerce/searchNpgOperations:
    post:
      tags:
        - eCommerce
      summary: Search npg operations by TransactionId
      description: GET with body payload - no resources created
      operationId: ecommerceSearchNpgOperations
      requestBody:
        $ref: '#/components/requestBodies/SearchNpgOperationsRequest'
      responses:
        '200':
          description: Transaction status found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchNpgOperationsResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '422':
          description: Unsupported version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
  /v2/ecommerce/searchTransaction:
    post:
      parameters:
        - in: "query"
          name: "pageNumber"
          schema:
            type: "integer"
            default: 0
          required: true
          description: "Searched page number, starting from 0"
        - in: "query"
          name: "pageSize"
          schema:
            type: "integer"
            minimum: 1
            maximum: 20
            default: 10
          required: true
          description: "Max element per page"
      tags:
        - "eCommerce"
      operationId: "ecommerceSearchTransaction"
      summary: "Search transaction by input parameters"
      description: "GET with body payload - no resources created"
      requestBody:
        $ref: "#/components/requestBodies/EcommerceSearchTransactionRequest"
      responses:
        "200":
          description: "Transactions found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTransactionResponse"
        "400":
          description: "Formally invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        "404":
          description: "Transaction not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Ocp-Apim-Subscription-Key
  schemas:
    # Oggetti di base senza dipendenze
    AmountEuroCents:
      description: Amount for payments, in euro cents
      type: integer
      minimum: 0
      maximum: 99999999
    HttpStatusCode:
      type: integer
      format: int32
      description: >-
        The HTTP status code generated by the origin server for this occurrence
        of the problem.
      minimum: 100
      maximum: 600
      exclusiveMaximum: true
      example: 200
    Product:
      type: string
      enum:
        - "PM"
        - "ECOMMERCE"
      description: "Product from which transaction belongs"

    # Oggetti intermedi
    PageInfo:
      description: Information about the returned query page
      type: object
      properties:
        current:
          type: integer
          description: Current returned page index (0-based)
        total:
          type: integer
          description: Total pages for the query (based on requested page size)
        results:
          type: integer
          description: Transactions returned into the current page
      required:
        - current
        - results
        - total
    ProblemJson:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: 'https://example.com/problem/constraint-violation'
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          $ref: '#/components/schemas/HttpStatusCode'
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem.
          example: There was an error processing the request
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
    DeadLetterSearchDateTimeRange:
      type: object
      description: Dead letter date time filter
      properties:
        startDate:
          type: string
          format: date-time
          description: Search start date
        endDate:
          type: string
          format: date-time
          description: Search end date
      required:
        - startDate
        - endDate
    DeadLetterSearchEventSource:
      type: string
      enum:
        - ALL
        - ECOMMERCE
        - NOTIFICATIONS_SERVICE
      description: Dead letter event source
    DeadLetterExcludedStatuses:
      type: object
      properties:
        ecommerceStatuses:
          type: array
          items:
            type: string
          description: List of eCommerce statuses to exclude
          example:
            - NOTIFIED_OK
        npgStatuses:
          type: array
          items:
            type: string
          description: List of NPG statuses to exclude
          example:
            - DECLINED
            - CANCELLED
      required:
        - ecommerceStatuses
        - npgStatuses
    NpgTransactionInfoDetailsData:
      type: object
      description: Npg transaction info details
      properties:
        type:
          type: string
        operationResult:
          type: string
        operationId:
          type: string
        correlationId:
          type: string
          format: uuid
          description: correlation id for a transaction executed with NPG
        paymentEndToEndId:
          type: string
          description: NPG payment end to end id
      required:
        - type
    RedirectTransactionInfoDetailsData:
      type: object
      description: Npg transaction info details
      properties:
        type:
          type: string
        outcome:
          type: string
      required:
        - type
    UserInfo:
      type: "object"
      description: "User information"
      properties:
        userFiscalCode:
          type: "string"
          minLength: 16
          maxLength: 16
        notificationEmail:
          type: "string"
          pattern: "(?:[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
        surname:
          type: "string"
          maxLength: 512
        name:
          type: "string"
          maxLength: 512
        username:
          type: "string"
          maxLength: 128
        authenticationType:
          type: "string"
      example:
        userFiscalCode: "user_fiscal_code"
        notificationEmail: "test@test.it"
        surname: "Surname"
        name: "Name"
        username: "username"
        authenticationType: "auth type"
    PspInfo:
      type: "object"
      description: "PSP info"
      properties:
        pspId:
          type: "string"
        businessName:
          type: "string"
        idChannel:
          type: "string"
      example:
        pspId: "EXAMPLEPSP"
        businessName: "businessName"
        idChannel: "13212880150_02_ONUS"
    PaymentDetailInfo:
      type: "object"
      description: "Payment details"
      properties:
        subject:
          type: "string"
        iuv:
          type: "string"
        rptId:
          type: "string"
        amount:
          $ref: "#/components/schemas/AmountEuroCents"
        paymentToken:
          type: "string"
        creditorInstitution:
          type: "string"
        paFiscalCode:
          type: "string"
      example:
        subject: "subject"
        iuv: "302001069073736640"
        rptId: "rptId"
        idTransaction: "paymentContextCode"
        paymentToken: "payment token"
        creditorInstitution: "66666666666"
        amount: 99999999
        paFiscalCode: "77777777777"
    PaymentInfo:
      type: "object"
      description: "Payment info"
      properties:
        origin:
          type: "string"
        idTransaction:
          type: "string"
        details:
          type: "array"
          items:
            $ref: "#/components/schemas/PaymentDetailInfo"
    TransactionInfo:
      type: "object"
      description: "Transaction info"
      properties:
        creationDate:
          type: "string"
          format: "date-time"
          description: "transaction creation date"
        status:
          type: "string"
        statusDetails:
          type: "string"
        eventStatus:
          $ref: "https://raw.githubusercontent.com/pagopa/pagopa-ecommerce-transactions-service/main/api-spec/v1/transactions-api.yaml#/components/schemas/TransactionStatus"
        amount:
          $ref: "#/components/schemas/AmountEuroCents"
        fee:
          $ref: "#/components/schemas/AmountEuroCents"
        grandTotal:
          $ref: "#/components/schemas/AmountEuroCents"
        rrn:
          type: "string"
        authorizationCode:
          type: "string"
        authorizationOperationId:
          type: "string"
          description: "Operation id for authorization. Present only if the payment gateway is NPG"
        refundOperationId:
          type: "string"
          description: "Operation id for the refund. Present only if the payment gateway is NPG"
        paymentMethodName:
          type: "string"
        brand:
          type: "string"
        authorizationRequestId:
          type: "string"
          description: "Authorization request id"
        paymentGateway:
          type: "string"
          description: "Payment gateway used to perform transaction"
        correlationId:
          type: "string"
          format: "uuid"
          description: "correlation id for a transaction executed with NPG"
        gatewayAuthorizationStatus:
          type: "string"
          description: "payment gateway authorization status"
        gatewayErrorCode:
          type: "string"
          description: "payment gateway authorization error code"
      example:
        creationDate: "2023-08-02T14:42:54.047"
        status: "status"
        statusDetails: "status detail"
        eventStatus: "NOTIFIED_OK"
        amount: 100
        fee: 10
        grandTotal: 110
        rrn: "rrn"
        authorizationCode: "auth code"
        authorizationOperationId: "009911013"
        refundOperationId: "645561643244"
        paymentMethodName: "payment method name"
        brand: "brand"
        authorizationRequestId: "authorizationRequestId"
        paymentGateway: "VPOS"
        correlationId: "30846e8f-efa1-47ad-abad-08cfb30e5c09"
        gatewayAuthorizationStatus: "DECLINED"
        gatewayErrorCode: "121"
    DeadLetterTransactionInfo:
      type: object
      description: Dead letter transaction info
      properties:
        transactionId:
          type: string
          minLength: 32
          maxLength: 32
        authorizationRequestId:
          type: string
        eCommerceStatus:
          $ref: 'https://raw.githubusercontent.com/pagopa/pagopa-ecommerce-transactions-service/main/api-spec/v1/transactions-api.yaml#/components/schemas/TransactionStatus'
        paymentGateway:
          type: string
          description: Payment gateway used to perform transaction
        paymentTokens:
          type: array
          items:
            type: string
        pspId:
          type: string
        paymentMethodName:
          type: string
        grandTotal:
          $ref: '#/components/schemas/AmountEuroCents'
        rrn:
          type: string
        details:
          type: object
          oneOf:
            - $ref: '#/components/schemas/NpgTransactionInfoDetailsData'
            - $ref: '#/components/schemas/RedirectTransactionInfoDetailsData'
      required:
        - transactionId
        - authorizationRequestId
        - eCommerceStatus
        - gateway
    DeadLetterEvent:
      type: object
      description: Dead letter event
      properties:
        queueName:
          type: string
          description: Name of the dead letter event source queue
        data:
          type: string
          description: Dead letter event data
        timestamp:
          type: string
          format: date-time
          description: Dead letter event insertion date time
        transactionInfo:
          $ref: '#/components/schemas/DeadLetterTransactionInfo'
          description: Dead letter transaction info
      required:
        - queueName
        - data
        - timestamp
    TransactionResult:
      type: "object"
      description: "TransactionResponse"
      properties:
        userInfo:
          $ref: "#/components/schemas/UserInfo"
        transactionInfo:
          $ref: "#/components/schemas/TransactionInfo"
        paymentInfo:
          $ref: "#/components/schemas/PaymentInfo"
        pspInfo:
          $ref: "#/components/schemas/PspInfo"
        product:
          $ref: "#/components/schemas/Product"
      required:
        - "userInfo"
        - "transactionInfo"
        - "paymentInfo"
        - "pspInfo"
        - "product"
    SearchDeadLetterEventResponse:
      type: object
      description: Dead letter event response
      properties:
        deadLetterEvents:
          type: array
          items:
            $ref: '#/components/schemas/DeadLetterEvent'
        page:
          $ref: '#/components/schemas/PageInfo'
      required:
        - deadLetterEvents
        - page
    SearchTransactionResponse:
      type: "object"
      description: "TransactionResponse"
      properties:
        transactions:
          type: "array"
          items:
            $ref: "#/components/schemas/TransactionResult"
        page:
          $ref: "#/components/schemas/PageInfo"
      required:
        - "transactions"
        - "page"
    SearchTransactionRequestTransactionId:
      type: "object"
      description: "Search transaction by transaction id"
      properties:
        type:
          type: "string"
        transactionId:
          type: "string"
          minLength: 32
          maxLength: 32
      required:
        - "type"
        - "transactionId"
      example:
        type: "TRANSACTION_ID"
        transactionId: "c9644451389e47b0a7d8e9d488fcd502"
    SearchNpgOperationsRequest:
      type: object
      description: ''
      properties:
        idTransaction:
          description: Uniquely identify a transaction
          type: string
          minLength: 32
          maxLength: 32
          example: 3fa85f6457174562b3fc2c963f66afa6
      required:
        - idTransaction
    SearchNpgOperationsResponse:
      type: object
      description: ''
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
    Operation:
      type: object
      properties:
        additionalData:
          type: object
          properties:
            authorizationCode:
              type: string
              description: A string representing the authorization code for the transaction.
            rrn:
              type: string
              description: A string representing the retrieval reference number (RRN) for the transaction.
          additionalProperties: false
          description: Object containing additional fields specific to the chosen payment method
          example:
            authorizationCode: '647189'
            rrn: BWtmt0ykQma3PElZ_k25vg
        operationAmount:
          type: string
          description: Operation amount in the payment currency
          example: '3545'
        operationCurrency:
          type: string
          description: Payment currency
          example: EUR
        operationId:
          type: string
          example: '3470744'
        operationResult:
          $ref: '#/components/schemas/OperationResult'
        operationTime:
          type: string
          description: Operation time in ISO 8601 format
          example: '2022-09-01T01:20:00.000Z'
        operationType:
          $ref: '#/components/schemas/OperationType'
        orderId:
          maxLength: 27
          type: string
          description: Merchant order id, unique in the merchant domain
          example: btid2384983
        paymentCircuit:
          $ref: '#/components/schemas/PaymentCircuit'
        paymentEndToEndId:
          maxLength: 35
          type: string
          description: It is defined by the circuit to uniquely identify the transaction. Required for circuid reconciliation purposes.
          example: e723hedsdew
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
    OperationResult:
      type: string
      description: |
        Transaction output:
        * AUTHORIZED - Payment authorized
        * EXECUTED - Payment confirmed, verification successfully executed
        * DECLINED - Declined by the Issuer during the authorization phase
        * DENIED_BY_RISK - Negative outcome of the transaction risk analysis
        * THREEDS_VALIDATED - 3DS authentication OK or 3DS skipped (non-secure payment)  
        * THREEDS_FAILED - cancellation or authentication failure during 3DS
        * PENDING - Payment ongoing. Follow up notifications are expected
        * CANCELED - Canceled by the cardholder
        * VOIDED - Online reversal of the full authorized amount
        * REFUNDED - Full or partial amount refunded
        * FAILED - Payment failed due to technical reasons
      example: AUTHORIZED
      enum:
        - AUTHORIZED
        - EXECUTED
        - DECLINED
        - DENIED_BY_RISK
        - THREEDS_VALIDATED
        - THREEDS_FAILED
        - PENDING
        - CANCELED
        - VOIDED
        - REFUNDED
        - FAILED
    OperationType:
      type: string
      description: |
        It indicates the purpose of the request:
        * AUTHORIZATION - any authorization with explicit capture
        * CAPTURE - a captured authorization or an implicit captured payment
        * VOID - reversal of an authorization
        * REFUND - refund of a captured amount
        * CANCEL - the rollback of an capture, refund.
      example: CAPTURE
      enum:
        - AUTHORIZATION
        - CAPTURE
        - VOID
        - REFUND
        - CANCEL
    PaymentMethod:
      type: string
      description: |
        * CARD - Any card circuit
        * APM - Alternative payment method
      example: CARD
      enum:
        - CARD
        - APM
    PaymentCircuit:
      type: string
      description: |
        one of the payment circuit values returned by the GET payment_methods web service. The list may include (but not limited to) VISA, MC, AMEX, DINERS, GOOGLE_PAY, APPLE_PAY, PAYPAL, BANCONTACT, BANCOMAT_PAY, MYBANK, PIS, AMAZON_PAY, ALIPAY."
      example: VISA
  requestBodies:
    SearchDeadLetterEventRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              source:
                $ref: '#/components/schemas/DeadLetterSearchEventSource'
              timeRange:
                $ref: '#/components/schemas/DeadLetterSearchDateTimeRange'
              excludedStatuses:
                $ref: '#/components/schemas/DeadLetterExcludedStatuses'
            required:
              - source
          examples:
            search by source without time range:
              value:
                source: ALL
            search by source with time range:
              value:
                source: ALL
                timeRange:
                  startDate: '2023-01-01T00:00:00.000Z'
                  endDate: '2023-01-01T02:00:00.000Z'
            search by source with time range and excluded statuses:
              value:
                source: ALL
                timeRange:
                  startDate: '2023-01-01T00:00:00.000Z'
                  endDate: '2023-01-01T02:00:00.000Z'
                excludedStatuses:
                  ecommerceStatuses:
                    - NOTIFIED_OK
                  npgStatuses:
                    - DECLINED
                    - CANCELLED
    EcommerceSearchTransactionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchTransactionRequestTransactionId"
          examples:
            search by transaction id:
              value:
                type: "TRANSACTION_ID"
                transactionId: "transactionId"
    SearchNpgOperationsRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchNpgOperationsRequest'
    EcommerceSearchTransactionResponse:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchTransactionResponse"
security:
  - ApiKeyAuth: []